<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
   [참고 사이트] 마이바티스
   -https://mybatis.org/mybatis-3/ko/getting-started.html
   
   마이바티스는 무엇인가요?
   -마이바티스는 개발자가 지정한 SQL, 저장 프로시저 그리고 몇가지 고급 매핑을 지원하는 퍼스스턴스 프레임워크입니다.
    마이바티스는 JDBC로 처리하는 상당ㅂ ㅜ분의 코드와 파라미터 설정 및 결과 매핑을 대신해줍니다.
    마이바티스는 데이터베이스 레코드에 원시타입과 Map 인터페이스 그리고 자바POJO를 설정해서
    매핑하기 위해 XML과 이노테이션을 사용할 수 있습니다.
    
    *** POJO란?
    - POJO(Plain Old Java Object)란, 순수한 자바 객체를 말합니다.
     그리고, 객체지향적인 원리에 충실하면서, 환경과 기술에 종속되지 않고 필요에 따라 재활용할 수 있는 방식으로 설계된 오브젝트
     객체지향원리를 기반으로 설게된 오브젝트(getter/setter를 이용한 VO들)
 
    namespace 항목은 쿼리가 여러 개일 때 이를 공간(namespace)를 분리하는 역할을 한다.
    쿼리 XML파일은 보통 여러 개 생성되기 때문에 이를 구별하는 용도로 사용합니다.
    
 -->



<mapper namespace="Book">

   <!-- 
      데이터 입력 SQL 쿼리 작성방법
      
      INSERT INTO 테이블명(컬럼1, 컬럼2...) VALUES(값1, 값2...)
      id 항목은 namespace 안에서 쿼리를 구분하는 유일한 식별자 역할을 합니다.
      parameterType은 쿼리에 적용할 파라미터 타입(현재 Map타입을 사용합니다)
      useGeneratedKeys와 keyProperty는 하나의 쌍으로 작성됩니다.
      useGeneratedKeys가 true로 설정되면 mybatis는 insert쿼리 실행 후 생성된 pk를 파라미터 객체의
      keyProperty 속성에 넣어줍니다. (예제를 통해 dao에서 확인할 수 있습니다.)
      
      useGeneratedKeys : 시퀀스로 자동 증가된 번호갑을 가져올 것인지에 대한 여부 설정(번호값은 우리 프로젝트에서 사용되어지는 룰)
      keyProperty : 여부 true 설정 시, 어떤 필드 값으로 받을 것인지 설정
      
      mabatis는 쿼리를 실행할 때 파라미터를 치환하는데 #{title}은 파라미터로 입력된 키를 값으로 치환합니다.
      map.get("title") == "제목" 형태가 mybatis 쿼리 xml에 전달되면 mybatis는 #{title}을 "제목"으로 자동 변환합니다.
      #{title}, #{category}, #{price} > {"제목", "카테고리", 1000} 이렇게 치환됩니다.
      
      <![CDATA[...]]> 항목은 원시(Raw)문자열을 나타내는데, 해당 문자열 안에 '<','>' 등의 태그 문자가 있더라도
      태그로 인식하지 않고 쿼리의 정상적인 형태로 인식할 수 있게 도와줍니다.
    -->

   <insert id="insert" parameterType="hashmap" useGeneratedKeys="true">
      <selectKey keyProperty="book_id" resultType="int" order="BEFORE">
         SELECT SEQ_BOOK.NEXTVAL FROM DUAL
      </selectKey>
      <![CDATA[
      INSERT INTO BOOK(
         BOOK_ID, TITLE, CATEGORY, PRICE
      ) VALUES(
         #{book_id}, #{title}, #{category}, #{price}
      )
         
      ]]>
   </insert>
   
   <!-- 
   	데이터 조회 sql 쿼리 작성방법
   	select title, category, price, insert_date
   	from book where book_id = 1
   	resultType 은 SELECT커ㅜ리가 실행된 후 반환된 값을 담을 컨테이너 타입을 말합니다.
    -->
   
   <select id = "selectBook" parameterType = "hashMap" resultType = "hashMap">
   	select book_id, title, category, price, insert_date from book where book_id = #{bookId}
   </select>
   
   <update id = "update" parameterType = "hashMap">
   		UPDATE BOOK
   		SET 
   			TITLE = #{title},
   			CATEGORY = #{category},
   			PRICE = #{price}
   		WHERE BOOK_ID = #{bookId}
   </update>
   <delete id = "delete" parameterType = "hashMap">
   		delete from book where book_id = #{bookId}
   </delete>
      
      <!-- 
      	책 정렬을 위해서 order by 구문을 사용합니다
      	작은 순서부터 정렬하기 위해서는 asc 큰 순서로 정렬하기 위해서는 desc 사용합니다
      	
      	where 1=1 은 관습적인 구문입니다
      	1=1은 참이기 때문에 where절을 나타낼때 사용합니다
      	조건이 2개 이상일 경우 처음에 시작하는 조건은 where절로 시작하고 두번째로 시작하는 조건은 and이여야 하기 떄문입니다
      	마이바티스 if문은 조건을 나타냅니다
      	test는 조건 규칙을 나타내는데 키워드가 있는 경우, if문의 쿼리들이 동작합니다
      	이때 쿼리의 내용이 파라미터가 아니라 마이바티스 규칙에 의해서 변경되는 것을 동적 쿼리라고 합니다
      	CDATA항목안에는 if 문의 작동이 되지 않기때문에 CDATA를 사용하는 구문은 별도로 구별해서 사용하여야 합니다
      	
      	SQL 쿼리 조건에서 포함을 나타내는 구문은 LIKE입니다
      	 - TITLE LIKE '검색어%' 일 경우는 검색어로 시작한다는 뜻입니다
      	 - TITLE LIKE '검색어' 일 경우는 검색어로 끝난다는 뜻입니다
      	 - TITLE LIKE '%검색어%' 일 경우는 검색어를 포함한다는 뜻입니다
       -->
      
      <select id="selectBookList" parameterType="hashMap" resultType="hashMap">
      SELECT BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE
      FROM BOOK
      WHERE 1=1
      <if test = "keyword != null and keyword != ''">
      	AND
      	(
      		TITLE LIKE '%'||#{keyword}||'%' OR
      		CATEGORY LIKE '%'||#{keyword}||'%'
      	)	
      </if>  
      ORDER BY INSERT_DATE DESC
   </select>
</mapper>